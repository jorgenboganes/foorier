import json
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np


json_data = '''{"lines":[{"points":[{"x":134.49944762694645,"y":253.10510545159494},{"x":134.49944762694645,"y":253.10510545159494},{"x":134.4394841421019,"y":253.0984784881395},{"x":134.2843144019914,"y":253.06571820028384},{"x":134.04254244736347,"y":252.98996381922365},{"x":134.04254244736347,"y":252.98996381922365},{"x":134.04254244736347,"y":252.98996381922365},{"x":141.55793531295788,"y":245.19775922637893},{"x":156.58973423852308,"y":237.53951143404797},{"x":174.93757405529118,"y":231.9257494855096},{"x":185.8910526384805,"y":228.76913896428962},{"x":194.8130625847855,"y":226.48258806766606},{"x":208.96446268472005,"y":222.01222975699125},{"x":222.07779955181917,"y":217.34994607632734},{"x":239.71236750662405,"y":207.77257950812378},{"x":246.67648769585475,"y":202.22837500692498},{"x":248.42461019756067,"y":199.94289863641833},{"x":252.5784536436825,"y":190.19899310659883},{"x":254.1471066000503,"y":183.71925370841163},{"x":253.25619106783262,"y":171.9713677631973},{"x":249.12022463094235,"y":161.32169370991767},{"x":246.46523408869066,"y":156.6802333174002},{"x":242.981256074366,"y":151.36396029684656},{"x":239.58521270904353,"y":146.9353756234784},{"x":238.7131587138099,"y":145.83560200603682},{"x":235.35896743918914,"y":142.2769887775194},{"x":233.80700553077614,"y":140.82698104385875},{"x":232.7782282568419,"y":139.85765218141805},{"x":231.75290944756327,"y":138.884424779562},{"x":231.17900849884774,"y":138.40568719768802},{"x":231.17900849884774,"y":138.40568719768802}],"brushColor":"#444","brushRadius":1}],"width":400,"height":400}'''
data = json.loads(json_data)
result_matrix = np.zeros((data["height"], data["width"]), dtype=np.uint8)


lines = data["lines"]
for line in lines:
    points = line["points"]
    for i in range(len(points) - 1):
        x1, y1 = int(points[i]["x"]), int(points[i]["y"])
        x2, y2 = int(points[i + 1]["x"]), int(points[i + 1]["y"])

        # Bresenham's line algorithm
        dx = abs(x2 - x1)
        dy = abs(y2 - y1)
        sx = 1 if x1 < x2 else -1
        sy = 1 if y1 < y2 else -1
        err = dx - dy

        while True:
            result_matrix[y1, x1] = 1

            if x1 == x2 and y1 == y2:
                break

            e2 = 2 * err
            if e2 > -dy:
                err -= dy
                x1 += sx
            if e2 < dx:
                err += dx
                y1 += sy

result_matrix_inverted = 1 - result_matrix
plt.imshow(result_matrix_inverted, cmap='gray')
plt.show()
